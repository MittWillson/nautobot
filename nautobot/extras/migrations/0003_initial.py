# Generated by Django 3.2.21 on 2023-10-06 15:30

from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.models
import nautobot.extras.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("extras", "0002_initial"),
        ("tenancy", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("dcim", "0004_initial"),
        ("virtualization", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="configcontext",
            name="cluster_groups",
            field=models.ManyToManyField(
                blank=True, related_name="_extras_configcontext_cluster_groups_+", to="virtualization.ClusterGroup"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="clusters",
            field=models.ManyToManyField(
                blank=True, related_name="_extras_configcontext_clusters_+", to="virtualization.Cluster"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="config_context_schema",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="config_contexts",
                to="extras.configcontextschema",
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="device_redundancy_groups",
            field=models.ManyToManyField(
                blank=True,
                related_name="_extras_configcontext_device_redundancy_groups_+",
                to="dcim.DeviceRedundancyGroup",
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="device_types",
            field=models.ManyToManyField(
                blank=True, related_name="_extras_configcontext_device_types_+", to="dcim.DeviceType"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="dynamic_groups",
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to=nautobot.extras.models.models.limit_dynamic_group_choices,
                related_name="_extras_configcontext_dynamic_groups_+",
                to="extras.DynamicGroup",
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="locations",
            field=models.ManyToManyField(
                blank=True, related_name="_extras_configcontext_locations_+", to="dcim.Location"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="owner_content_type",
            field=models.ForeignKey(
                blank=True,
                default=None,
                limit_choices_to=nautobot.extras.utils.FeatureQuery("config_context_owners"),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="config_contexts",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="platforms",
            field=models.ManyToManyField(
                blank=True, related_name="_extras_configcontext_platforms_+", to="dcim.Platform"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="roles",
            field=models.ManyToManyField(blank=True, related_name="_extras_configcontext_roles_+", to="extras.Role"),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="tags",
            field=models.ManyToManyField(blank=True, related_name="_extras_configcontext_tags_+", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="tenant_groups",
            field=models.ManyToManyField(
                blank=True, related_name="_extras_configcontext_tenant_groups_+", to="tenancy.TenantGroup"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="tenants",
            field=models.ManyToManyField(
                blank=True, related_name="_extras_configcontext_tenants_+", to="tenancy.Tenant"
            ),
        ),
        migrations.AddField(
            model_name="computedfield",
            name="content_type",
            field=models.ForeignKey(
                limit_choices_to=nautobot.extras.utils.FeatureQuery("custom_fields"),
                on_delete=django.db.models.deletion.CASCADE,
                related_name="computed_fields",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taggeditem",
            unique_together={("content_type", "object_id", "tag")},
        ),
        migrations.AlterIndexTogether(
            name="taggeditem",
            index_together={("content_type", "object_id")},
        ),
        migrations.AlterUniqueTogether(
            name="secretsgroupassociation",
            unique_together={("secrets_group", "access_type", "secret_type")},
        ),
        migrations.AlterUniqueTogether(
            name="relationshipassociation",
            unique_together={("relationship", "source_type", "source_id", "destination_type", "destination_id")},
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(
                fields=["request_id", "changed_object_type_id", "changed_object_id"],
                name="extras_objectchange_triple_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(fields=["request_id", "changed_object_type_id"], name="extras_objectchange_double_idx"),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(fields=["-time"], name="extras_objectchange_rtime_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="objectchange",
            unique_together={("time", "request_id", "changed_object_type", "changed_object_id")},
        ),
        migrations.AlterUniqueTogether(
            name="note",
            unique_together={("assigned_object_type", "assigned_object_id", "user_name", "created")},
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(fields=["-date_created"], name="extras_jobresult_rcreated_idx"),
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(fields=["-date_done"], name="extras_jr_rdone_idx"),
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(fields=["status", "-date_created"], name="extras_jr_statrcreate_idx"),
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(fields=["status", "-date_done"], name="extras_jr_statrdone_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="job",
            unique_together={("module_name", "job_class_name")},
        ),
        migrations.AlterUniqueTogether(
            name="exporttemplate",
            unique_together={("content_type", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="dynamicgroupmembership",
            unique_together={("group", "parent_group", "operator", "weight")},
        ),
        migrations.AlterUniqueTogether(
            name="customfieldchoice",
            unique_together={("custom_field", "value")},
        ),
        migrations.AlterUniqueTogether(
            name="computedfield",
            unique_together={("content_type", "label")},
        ),
    ]
