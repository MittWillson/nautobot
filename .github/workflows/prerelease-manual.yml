---
name: "Pre-Release"
on:
  push:
    branches:
      - "release/2.0.0-rc.3-manual-run"

jobs:
  publish_containers:
    name: "Build & Publish Container Images"
    runs-on: "self-hosted"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11" ]
    env:
      INVOKE_NAUTOBOT_PYTHON_VER: "${{ matrix.python-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: "gitbranch"
      - name: "Set up QEMU"
        uses: "docker/setup-qemu-action@v1"
      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Docker Metadata"
        id: "dockermeta"
        uses: "docker/metadata-action@v3"
        with:
          images: "networktocode/nautobot,ghcr.io/nautobot/nautobot"
          flavor: |
            latest=false
          tags: |
            type=raw,value=2.0.0-rc.3,suffix=-py${{ matrix.python-version }}
            type=raw,value=2.0.0-rc.3,enable=${{ matrix.python-version == 3.11 }}
          labels: |
            org.opencontainers.image.title=Nautobot
      - name: "Build"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          target: final
          file: "docker/Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          tags: "${{ steps.dockermeta.outputs.tags }}"
          labels: "${{ steps.dockermeta.outputs.labels }}"
          cache-from: "type=gha,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
            POETRY_INSTALLER_PARALLEL=true
      - name: "Docker Dev Metadata"
        id: "dockerdevmeta"
        uses: "docker/metadata-action@v3"
        with:
          images: "networktocode/nautobot-dev,ghcr.io/nautobot/nautobot-dev"
          flavor: |
            latest=false
          tags: |
            type=raw,value=2.0.0-rc.3,suffix=-py${{ matrix.python-version }}
            type=raw,value=2.0.0-rc.3,enable=${{ matrix.python-version == 3.11 }}
          labels: |
            org.opencontainers.image.title=Nautobot
      - name: "Build Dev Containers"
        uses: "docker/build-push-action@v2"
        with:
          push: false
          target: final-dev
          file: "docker/Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          tags: "${{ steps.dockerdevmeta.outputs.tags }}"
          labels: "${{ steps.dockerdevmeta.outputs.labels }}"
          cache-from: "type=gha,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          cache-to: "type=gha,mode=max,scope=nautobot-${{ steps.gitbranch.outputs.branch }}-${{ matrix.python-version }}"
          context: "."
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}
            POETRY_INSTALLER_PARALLEL=true

  # slack-notify:
  #   needs:
  #     - "publish_containers"
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL }}"
  #     SLACK_MESSAGE: >-
  #       *NOTIFICATION: NEW-RELEASE-PUBLISHED*\n
  #       Repository: <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>\n
  #       Release: <${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}>\n
  #       Published by: <${{ github.server_url }}/${{ github.actor }}|${{ github.actor }}>
  #   steps:
  #     - name: "Send a notification to Slack"
  #       # ENVs cannot be used directly in job.if. This is a workaround to check
  #       # if SLACK_WEBHOOK_URL is present.
  #       if: "${{ env.SLACK_WEBHOOK_URL != '' }}"
  #       uses: "slackapi/slack-github-action@v1.17.0"
  #       with:
  #         payload: |
  #           {
  #             "text": "${{ env.SLACK_MESSAGE }}",
  #             "blocks": [
  #               {
  #                 "type": "section",
  #                 "text": {
  #                   "type": "mrkdwn",
  #                   "text": "${{ env.SLACK_MESSAGE }}"
  #                 }
  #               }
  #             ]
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL }}"
  #         SLACK_WEBHOOK_TYPE: "INCOMING_WEBHOOK"
